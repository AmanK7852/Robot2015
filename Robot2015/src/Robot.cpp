

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
Elevator* Robot::elevator = 0;
PickerUpper* Robot::pickerUpper = 0;
Punch* Robot::punch = 0;
LEDSubsystem* Robot::lEDSubsystem = 0;
CanHolder* Robot::canHolder = 0;
OI* Robot::oi = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	elevator = new Elevator();
	pickerUpper = new PickerUpper();
	punch = new Punch();
	lEDSubsystem = new LEDSubsystem();
	canHolder = new CanHolder();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.Aight

	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	if (RobotMap::pickerUpperAutoSwitch1->Get() && RobotMap::pickerUpperAutoSwitch2->Get()){
		autonomousCommand = new AutonomousCommand0();
	}
	else if (RobotMap::pickerUpperAutoSwitch1->Get() && !(RobotMap::pickerUpperAutoSwitch2->Get())){
		autonomousCommand = new AutonomousCommand1();
	}
	else if (!(RobotMap::pickerUpperAutoSwitch1->Get()) && RobotMap::pickerUpperAutoSwitch2->Get()){
		autonomousCommand = new AutonomousCommand2();
	}
	else if (!(RobotMap::pickerUpperAutoSwitch1->Get()) && !(RobotMap::pickerUpperAutoSwitch2->Get())){
		autonomousCommand = new AutonomousCommand3();
	}
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();

	SmartDashboard::PutNumber("Infrared Sensor", Robot::pickerUpper->pickupIR->GetVoltage());
	SmartDashboard::PutNumber("Joystick Driver Left", Robot::oi->getJoystickDriver()->GetRawAxis(1));
	SmartDashboard::PutNumber("Joystick Driver Right", Robot::oi->getJoystickDriver()->GetRawAxis(5));
	SmartDashboard::PutNumber("Left Motor", Robot::driveTrain->leftMotor->Get());
	SmartDashboard::PutNumber("Right Motor", Robot::driveTrain->rightMotor->Get());
	SmartDashboard::PutNumber("Encoder Elevator", Robot::elevator->elevatorEncoder->Get());
	SmartDashboard::PutNumber("Elevator Motor", Robot::elevator->elevatorMotor->Get());
	SmartDashboard::PutNumber("Joystick Operator Left", Robot::oi->getJoystickOperator()->GetRawAxis(1));
	SmartDashboard::PutNumber("Gyroscope", Robot::driveTrain->driveGyro->GetAngle());
	SmartDashboard::PutNumber("DriveEncoder", Robot::driveTrain->driveEncoder->Get());
	SmartDashboard::PutNumber("Left Roller", Robot::pickerUpper->leftRoller->Get());
	SmartDashboard::PutNumber("Right Roller", Robot::pickerUpper->rightRoller->Get());
	SmartDashboard::PutNumber("Ultrasonic Sensor", Robot::lEDSubsystem->lEDUltrasonic->GetAverageVoltage() / 0.012446);

	SmartDashboard::PutBoolean("Auto Switch 1", Robot::pickerUpper->autoSwitch1->Get());
	SmartDashboard::PutBoolean("Auto Switch 2", Robot::pickerUpper->autoSwitch2->Get());
	SmartDashboard::PutBoolean("IR sensing something", (Robot::pickerUpper->IRSensingIn()));
	SmartDashboard::PutBoolean("Lower Optic Gate", Robot::elevator->lowerOpticGate->Get());
	SmartDashboard::PutBoolean("Upper Optic Gate", Robot::elevator->upperOpticGate->Get());
	SmartDashboard::PutBoolean("Back Limit Switch", Robot::punch->backLimitSwitch->Get());
	SmartDashboard::PutBoolean("Front Limit Switch", Robot::punch->frontLimitSwitch->Get());
	SmartDashboard::PutBoolean("Can Open Limit Switch", Robot::canHolder->canOpenLimitSwitch->Get());
	SmartDashboard::PutBoolean("Can Closed Limit Switch", Robot::canHolder->canClosedLimitSwitch->Get());
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

